name: 'Cross-Platform Build'
description: 'Build Go binary for specified platform with Makefile integration'
author: 'Claude Code Environment Switcher Team'

inputs:
  target-os:
    description: 'Target operating system (linux, darwin, windows)'
    required: true
  target-arch:
    description: 'Target architecture (amd64, arm64)'
    required: true
  output-path:
    description: 'Output directory for build artifacts'
    required: false
    default: 'dist'
  binary-name:
    description: 'Binary name (without extension)'
    required: false
    default: 'cce'
  version:
    description: 'Version to embed in binary'
    required: false
    default: '1.0.0'
  ldflags:
    description: 'Additional linker flags'
    required: false
    default: ''
  validate-binary:
    description: 'Validate binary can execute'
    required: false
    default: 'true'

outputs:
  binary-path:
    description: 'Path to the built binary'
    value: ${{ steps.build.outputs.binary-path }}
  binary-size:
    description: 'Size of the built binary in bytes'
    value: ${{ steps.validate.outputs.binary-size }}
  checksum:
    description: 'SHA256 checksum of the binary'
    value: ${{ steps.validate.outputs.checksum }}

runs:
  using: 'composite'
  steps:
    - name: Determine binary name and extension
      id: binary-info
      shell: bash
      run: |
        BINARY_NAME="${{ inputs.binary-name }}"
        if [ "${{ inputs.target-os }}" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        
        FULL_BINARY_NAME="${{ inputs.binary-name }}-${{ inputs.target-os }}-${{ inputs.target-arch }}"
        if [ "${{ inputs.target-os }}" = "windows" ]; then
          FULL_BINARY_NAME="${FULL_BINARY_NAME}.exe"
        fi
        
        echo "binary-name=${BINARY_NAME}" >> $GITHUB_OUTPUT
        echo "full-binary-name=${FULL_BINARY_NAME}" >> $GITHUB_OUTPUT

    - name: Create output directory
      shell: bash
      run: |
        mkdir -p "${{ inputs.output-path }}"
        echo "Created output directory: ${{ inputs.output-path }}"

    - name: Build binary
      id: build
      shell: bash
      env:
        GOOS: ${{ inputs.target-os }}
        GOARCH: ${{ inputs.target-arch }}
        CGO_ENABLED: 0
      run: |
        BUILD_TIME=$(date -u '+%Y-%m-%d_%H:%M:%S')
        COMMIT_HASH=${GITHUB_SHA:0:8}
        VERSION="${{ inputs.version }}"
        
        # Construct ldflags
        LDFLAGS="-ldflags \"-X main.version=${VERSION} -X main.buildTime=${BUILD_TIME} -X main.commitHash=${COMMIT_HASH} ${{ inputs.ldflags }}\""
        
        BINARY_PATH="${{ inputs.output-path }}/${{ steps.binary-info.outputs.full-binary-name }}"
        
        echo "Building for ${GOOS}/${GOARCH}..."
        echo "Output: ${BINARY_PATH}"
        echo "Version: ${VERSION}"
        echo "Build Time: ${BUILD_TIME}"
        echo "Commit: ${COMMIT_HASH}"
        
        # Build using go build directly (similar to Makefile)
        eval "go build ${LDFLAGS} -o \"${BINARY_PATH}\" ."
        
        if [ $? -eq 0 ]; then
          echo "✅ Build successful"
          echo "binary-path=${BINARY_PATH}" >> $GITHUB_OUTPUT
        else
          echo "❌ Build failed"
          exit 1
        fi

    - name: Validate and get binary info
      id: validate
      shell: bash
      run: |
        BINARY_PATH="${{ steps.build.outputs.binary-path }}"
        
        if [ ! -f "${BINARY_PATH}" ]; then
          echo "❌ Binary not found: ${BINARY_PATH}"
          exit 1
        fi
        
        # Get binary size
        BINARY_SIZE=$(stat -c%s "${BINARY_PATH}" 2>/dev/null || stat -f%z "${BINARY_PATH}" 2>/dev/null || echo "unknown")
        echo "Binary size: ${BINARY_SIZE} bytes"
        echo "binary-size=${BINARY_SIZE}" >> $GITHUB_OUTPUT
        
        # Calculate checksum
        if command -v sha256sum >/dev/null 2>&1; then
          CHECKSUM=$(sha256sum "${BINARY_PATH}" | cut -d' ' -f1)
        elif command -v shasum >/dev/null 2>&1; then
          CHECKSUM=$(shasum -a 256 "${BINARY_PATH}" | cut -d' ' -f1)
        else
          CHECKSUM="unavailable"
        fi
        echo "SHA256: ${CHECKSUM}"
        echo "checksum=${CHECKSUM}" >> $GITHUB_OUTPUT
        
        # Make binary executable
        chmod +x "${BINARY_PATH}"
        
        echo "✅ Binary validation complete"

    - name: Test binary execution
      if: inputs.validate-binary == 'true' && inputs.target-os == runner.os
      shell: bash
      run: |
        BINARY_PATH="${{ steps.build.outputs.binary-path }}"
        echo "Testing binary execution..."
        
        # Test help command to verify binary works
        timeout 10s "${BINARY_PATH}" --help >/dev/null 2>&1 || {
          echo "⚠️ Binary execution test failed or timed out"
          echo "This might be expected for cross-compiled binaries"
        }
        echo "✅ Binary execution test completed"

    - name: Generate build report
      shell: bash
      run: |
        BINARY_PATH="${{ steps.build.outputs.binary-path }}"
        BINARY_SIZE="${{ steps.validate.outputs.binary-size }}"
        CHECKSUM="${{ steps.validate.outputs.checksum }}"
        
        echo "## Build Report" >> build-report.md
        echo "- **Target**: ${{ inputs.target-os }}/${{ inputs.target-arch }}" >> build-report.md
        echo "- **Binary**: $(basename ${BINARY_PATH})" >> build-report.md
        echo "- **Size**: ${BINARY_SIZE} bytes" >> build-report.md
        echo "- **SHA256**: ${CHECKSUM}" >> build-report.md
        echo "- **Built at**: $(date -u)" >> build-report.md
        echo "" >> build-report.md
        
        echo "Build report generated"