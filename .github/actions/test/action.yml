name: 'Comprehensive Test Execution'
description: 'Execute Go tests with coverage reporting and validation'
author: 'Claude Code Environment Switcher Team'

inputs:
  test-type:
    description: 'Type of tests to run (unit, integration, security, performance, all)'
    required: false
    default: 'unit'
  coverage-threshold:
    description: 'Minimum coverage percentage required'
    required: false
    default: '80'
  parallel:
    description: 'Enable parallel test execution'
    required: false
    default: 'true'
  race-detection:
    description: 'Enable race condition detection'
    required: false
    default: 'true'
  timeout:
    description: 'Test timeout (e.g., 10m, 30s)'
    required: false
    default: '10m'
  retry-count:
    description: 'Number of retries for flaky tests'
    required: false
    default: '2'
  output-dir:
    description: 'Directory for test outputs and reports'
    required: false
    default: 'test-results'

outputs:
  test-result:
    description: 'Overall test result (success/failure)'
    value: ${{ steps.run-tests.outputs.result }}
  coverage-percentage:
    description: 'Test coverage percentage'
    value: ${{ steps.coverage.outputs.percentage }}
  total-tests:
    description: 'Total number of tests executed'
    value: ${{ steps.run-tests.outputs.total-tests }}
  failed-tests:
    description: 'Number of failed tests'
    value: ${{ steps.run-tests.outputs.failed-tests }}

runs:
  using: 'composite'
  steps:
    - name: Create output directory
      shell: bash
      run: |
        mkdir -p "${{ inputs.output-dir }}"
        echo "Created test output directory: ${{ inputs.output-dir }}"

    - name: Determine test path
      id: test-path
      shell: bash
      run: |
        case "${{ inputs.test-type }}" in
          "unit")
            TEST_PATH="./..."
            EXCLUDE_PATHS="-skip=integration|security|performance"
            ;;
          "integration")
            TEST_PATH="./test/integration/..."
            EXCLUDE_PATHS=""
            ;;
          "security")
            TEST_PATH="./test/security/..."
            EXCLUDE_PATHS=""
            ;;
          "performance")
            TEST_PATH="./test/performance/..."
            EXCLUDE_PATHS=""
            ;;
          "all")
            TEST_PATH="./..."
            EXCLUDE_PATHS=""
            ;;
          *)
            echo "Unknown test type: ${{ inputs.test-type }}"
            exit 1
            ;;
        esac
        
        echo "test-path=${TEST_PATH}" >> $GITHUB_OUTPUT
        echo "exclude-paths=${EXCLUDE_PATHS}" >> $GITHUB_OUTPUT
        echo "Test path: ${TEST_PATH}"
        echo "Exclude patterns: ${EXCLUDE_PATHS}"

    - name: Run tests with retry logic
      id: run-tests
      shell: bash
      run: |
        TEST_PATH="${{ steps.test-path.outputs.test-path }}"
        EXCLUDE_PATHS="${{ steps.test-path.outputs.exclude-paths }}"
        RETRY_COUNT="${{ inputs.retry-count }}"
        
        # Build test flags
        TEST_FLAGS="-v -timeout=${{ inputs.timeout }}"
        
        if [ "${{ inputs.race-detection }}" = "true" ]; then
          TEST_FLAGS="${TEST_FLAGS} -race"
        fi
        
        if [ "${{ inputs.parallel }}" = "true" ]; then
          TEST_FLAGS="${TEST_FLAGS} -parallel=4"
        fi
        
        if [ "${{ inputs.test-type }}" = "performance" ]; then
          TEST_FLAGS="${TEST_FLAGS} -bench=. -benchmem"
        fi
        
        # Add coverage for unit and integration tests
        if [ "${{ inputs.test-type }}" = "unit" ] || [ "${{ inputs.test-type }}" = "integration" ] || [ "${{ inputs.test-type }}" = "all" ]; then
          TEST_FLAGS="${TEST_FLAGS} -coverprofile=${{ inputs.output-dir }}/coverage.out"
        fi
        
        echo "Test flags: ${TEST_FLAGS}"
        echo "Test command: go test ${TEST_FLAGS} ${TEST_PATH}"
        
        # Function to run tests with output parsing
        run_test_attempt() {
          local attempt=$1
          echo "=== Test Attempt ${attempt} ==="
          
          # Run tests and capture output
          if [ -n "${EXCLUDE_PATHS}" ]; then
            go test ${TEST_FLAGS} ${TEST_PATH} 2>&1 | tee "${{ inputs.output-dir }}/test-output-${attempt}.log" | grep -v -E "${EXCLUDE_PATHS}" || true
          else
            go test ${TEST_FLAGS} ${TEST_PATH} 2>&1 | tee "${{ inputs.output-dir }}/test-output-${attempt}.log"
          fi
          
          return ${PIPESTATUS[0]}
        }
        
        # Retry logic
        SUCCESS=false
        for i in $(seq 1 $((RETRY_COUNT + 1))); do
          if run_test_attempt $i; then
            echo "✅ Tests passed on attempt $i"
            SUCCESS=true
            break
          else
            if [ $i -lt $((RETRY_COUNT + 1)) ]; then
              echo "⚠️ Tests failed on attempt $i, retrying..."
              sleep 2
            else
              echo "❌ Tests failed after $i attempts"
            fi
          fi
        done
        
        # Parse test results
        if [ -f "${{ inputs.output-dir }}/test-output-1.log" ]; then
          TOTAL_TESTS=$(grep -E "^=== RUN|^--- PASS|^--- FAIL" "${{ inputs.output-dir }}/test-output-1.log" | grep -c "^=== RUN" || echo "0")
          FAILED_TESTS=$(grep -c "^--- FAIL" "${{ inputs.output-dir }}/test-output-1.log" || echo "0")
        else
          TOTAL_TESTS="0"
          FAILED_TESTS="0"
        fi
        
        echo "total-tests=${TOTAL_TESTS}" >> $GITHUB_OUTPUT
        echo "failed-tests=${FAILED_TESTS}" >> $GITHUB_OUTPUT
        
        if [ "${SUCCESS}" = "true" ]; then
          echo "result=success" >> $GITHUB_OUTPUT
        else
          echo "result=failure" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Process coverage report
      id: coverage
      if: success() && (inputs.test-type == 'unit' || inputs.test-type == 'integration' || inputs.test-type == 'all')
      shell: bash
      run: |
        COVERAGE_FILE="${{ inputs.output-dir }}/coverage.out"
        
        if [ -f "${COVERAGE_FILE}" ]; then
          # Generate HTML coverage report
          go tool cover -html="${COVERAGE_FILE}" -o "${{ inputs.output-dir }}/coverage.html"
          
          # Extract coverage percentage
          COVERAGE_PERCENT=$(go tool cover -func="${COVERAGE_FILE}" | grep "total:" | awk '{print $3}' | sed 's/%//')
          
          if [ -z "${COVERAGE_PERCENT}" ]; then
            COVERAGE_PERCENT="0.0"
          fi
          
          echo "Coverage: ${COVERAGE_PERCENT}%"
          echo "percentage=${COVERAGE_PERCENT}" >> $GITHUB_OUTPUT
          
          # Check coverage threshold
          THRESHOLD="${{ inputs.coverage-threshold }}"
          if [ "$(echo "${COVERAGE_PERCENT} >= ${THRESHOLD}" | bc -l)" -eq 1 ]; then
            echo "✅ Coverage ${COVERAGE_PERCENT}% meets threshold ${THRESHOLD}%"
          else
            echo "❌ Coverage ${COVERAGE_PERCENT}% below threshold ${THRESHOLD}%"
            exit 1
          fi
          
          # Generate coverage summary
          echo "## Coverage Report" > "${{ inputs.output-dir }}/coverage-summary.md"
          echo "- **Total Coverage**: ${COVERAGE_PERCENT}%" >> "${{ inputs.output-dir }}/coverage-summary.md"
          echo "- **Threshold**: ${{ inputs.coverage-threshold }}%" >> "${{ inputs.output-dir }}/coverage-summary.md"
          echo "- **Status**: $([ "$(echo "${COVERAGE_PERCENT} >= ${THRESHOLD}" | bc -l)" -eq 1 ] && echo "✅ Pass" || echo "❌ Fail")" >> "${{ inputs.output-dir }}/coverage-summary.md"
          echo "" >> "${{ inputs.output-dir }}/coverage-summary.md"
          echo "### Detailed Coverage" >> "${{ inputs.output-dir }}/coverage-summary.md"
          echo '```' >> "${{ inputs.output-dir }}/coverage-summary.md"
          go tool cover -func="${COVERAGE_FILE}" >> "${{ inputs.output-dir }}/coverage-summary.md"
          echo '```' >> "${{ inputs.output-dir }}/coverage-summary.md"
        else
          echo "No coverage file found"
          echo "percentage=0" >> $GITHUB_OUTPUT
        fi

    - name: Generate test summary
      if: always()
      shell: bash
      run: |
        RESULT="${{ steps.run-tests.outputs.result }}"
        TOTAL="${{ steps.run-tests.outputs.total-tests }}"
        FAILED="${{ steps.run-tests.outputs.failed-tests }}"
        COVERAGE="${{ steps.coverage.outputs.percentage }}"
        
        echo "## Test Summary - ${{ inputs.test-type }}" > "${{ inputs.output-dir }}/test-summary.md"
        echo "- **Result**: $([ "${RESULT}" = "success" ] && echo "✅ Success" || echo "❌ Failure")" >> "${{ inputs.output-dir }}/test-summary.md"
        echo "- **Total Tests**: ${TOTAL}" >> "${{ inputs.output-dir }}/test-summary.md"
        echo "- **Failed Tests**: ${FAILED}" >> "${{ inputs.output-dir }}/test-summary.md"
        
        if [ -n "${COVERAGE}" ] && [ "${COVERAGE}" != "0" ]; then
          echo "- **Coverage**: ${COVERAGE}%" >> "${{ inputs.output-dir }}/test-summary.md"
        fi
        
        echo "- **Test Type**: ${{ inputs.test-type }}" >> "${{ inputs.output-dir }}/test-summary.md"
        echo "- **Executed At**: $(date -u)" >> "${{ inputs.output-dir }}/test-summary.md"
        echo "" >> "${{ inputs.output-dir }}/test-summary.md"
        
        if [ "${FAILED}" != "0" ]; then
          echo "### Failed Tests" >> "${{ inputs.output-dir }}/test-summary.md"
          echo "Check the test output logs for detailed failure information." >> "${{ inputs.output-dir }}/test-summary.md"
        fi
        
        echo "Test summary generated"

    - name: Archive test artifacts
      if: always()
      shell: bash
      run: |
        echo "Test artifacts available in: ${{ inputs.output-dir }}"
        ls -la "${{ inputs.output-dir }}" || true