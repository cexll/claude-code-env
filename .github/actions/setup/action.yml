name: 'Setup Go Environment'
description: 'Set up Go environment with caching and tool installation'
author: 'Claude Code Environment Switcher Team'

inputs:
  go-version:
    description: 'Go version to install (validated against go.mod)'
    required: false
    default: '1.24.5'
  cache-dependency-path:
    description: 'Path to go.mod for cache key generation'
    required: false
    default: '**/go.sum'
  install-tools:
    description: 'Install additional tools (golangci-lint, gosec, govulncheck)'
    required: false
    default: 'true'
  tool-cache-prefix:
    description: 'Cache prefix for installed tools'
    required: false
    default: 'tools'
  validate-version-consistency:
    description: 'Validate Go version consistency across files'
    required: false
    default: 'true'
  install-govulncheck:
    description: 'Install govulncheck vulnerability scanner'
    required: false
    default: 'true'
  golangci-config-required:
    description: 'Require .golangci.yml configuration file'
    required: false
    default: 'true'

outputs:
  go-version:
    description: 'Installed Go version'
    value: ${{ steps.setup-go.outputs.go-version }}
  cache-hit:
    description: 'Whether cache was hit for Go modules'
    value: ${{ steps.cache-modules.outputs.cache-hit }}
  tools-cache-hit:
    description: 'Whether cache was hit for tools'
    value: ${{ steps.cache-tools.outputs.cache-hit }}
  version-consistent:
    description: 'Whether Go versions are consistent across files'
    value: ${{ steps.validate-config.outputs.go-version-consistent }}
  config-valid:
    description: 'Whether configuration files are valid'
    value: ${{ steps.validate-config.outputs.golangci-config-valid }}

runs:
  using: 'composite'
  steps:
    - name: Validate configuration consistency
      id: validate-config
      if: inputs.validate-version-consistency == 'true'
      uses: ./.github/actions/validate-config
      with:
        validate-go-versions: 'true'
        validate-golangci-config: ${{ inputs.golangci-config-required }}
        fail-on-mismatch: 'true'

    - name: Set up Go
      id: setup-go
      uses: actions/setup-go@93397bea11091df50f3d7e59dc26a7711a8bcfbe # v4.1.0
      with:
        go-version: ${{ inputs.go-version }}
        check-latest: true

    - name: Cache Go modules
      id: cache-modules
      uses: actions/cache@704facf57e6136b1bc63b828d79edcd491f0ee84 # v3.3.2
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles(inputs.cache-dependency-path) }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Cache tools
      id: cache-tools
      if: inputs.install-tools == 'true'
      uses: actions/cache@704facf57e6136b1bc63b828d79edcd491f0ee84 # v3.3.2
      with:
        path: |
          ~/.local/bin
          ~/go/bin
        key: ${{ runner.os }}-${{ inputs.tool-cache-prefix }}-${{ hashFiles('**/go.mod') }}
        restore-keys: |
          ${{ runner.os }}-${{ inputs.tool-cache-prefix }}-

    - name: Download Go modules
      shell: bash
      run: |
        echo "Downloading Go modules..."
        go mod download
        go mod tidy

    - name: Install development tools
      if: inputs.install-tools == 'true' && steps.cache-tools.outputs.cache-hit != 'true'
      shell: bash
      run: |
        echo "Installing development tools..."

        # Install golangci-lint
        if ! command -v golangci-lint &> /dev/null; then
          echo "Installing golangci-lint..."
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2
        else
          echo "✅ golangci-lint already installed"
        fi

        # Install gosec
        if ! command -v gosec &> /dev/null; then
          echo "Installing gosec..."
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@v2.18.2
        else
          echo "✅ gosec already installed"
        fi

        # Install govulncheck (enhanced security tool)
        if [ "${{ inputs.install-govulncheck }}" = "true" ]; then
          if ! command -v govulncheck &> /dev/null; then
            echo "Installing govulncheck..."
            go install golang.org/x/vuln/cmd/govulncheck@latest
          else
            echo "✅ govulncheck already installed"
          fi
        fi

        echo "✅ Development tools installation complete"

    - name: Verify Go installation and tools
      shell: bash
      run: |
        echo "=== Go Environment Information ==="
        echo "Go version: $(go version)"
        echo "Go environment:"
        echo "  GOPATH: $(go env GOPATH)"
        echo "  GOCACHE: $(go env GOCACHE)"
        echo "  GOROOT: $(go env GOROOT)"
        echo "  GOOS: $(go env GOOS)"
        echo "  GOARCH: $(go env GOARCH)"

        if [ "${{ inputs.install-tools }}" = "true" ]; then
          echo ""
          echo "=== Installed Development Tools ==="
          if command -v golangci-lint &> /dev/null; then
            echo "✅ golangci-lint: $(golangci-lint version --format short)"
          else
            echo "❌ golangci-lint not found"
          fi

          if command -v gosec &> /dev/null; then
            echo "✅ gosec: $(gosec -version 2>&1 | head -n1)"
          else
            echo "❌ gosec not found"
          fi

          if [ "${{ inputs.install-govulncheck }}" = "true" ]; then
            if command -v govulncheck &> /dev/null; then
              echo "✅ govulncheck: $(govulncheck -version 2>&1 | head -n1)"
            else
              echo "❌ govulncheck not found"
            fi
          fi
        fi

        echo ""
        echo "=== Configuration Validation Results ==="
        if [ "${{ inputs.validate-version-consistency }}" = "true" ]; then
          echo "Go version consistency: ${{ steps.validate-config.outputs.go-version-consistent == 'true' && '✅ PASS' || '❌ FAIL' }}"
          if [ "${{ inputs.golangci-config-required }}" = "true" ]; then
            echo ".golangci.yml validation: ${{ steps.validate-config.outputs.golangci-config-valid == 'true' && '✅ PASS' || '❌ FAIL' }}"
          fi
        fi
        echo "================================="

    - name: Set environment variables
      shell: bash
      run: |
        echo "Setting up environment variables..."
        echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
        echo "GOCACHE=$(go env GOCACHE)" >> $GITHUB_ENV
        echo "GOROOT=$(go env GOROOT)" >> $GITHUB_ENV
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

        # Set additional environment variables for enhanced CI
        echo "CCE_GO_VERSION=${{ inputs.go-version }}" >> $GITHUB_ENV
        echo "CCE_TOOLS_INSTALLED=${{ inputs.install-tools }}" >> $GITHUB_ENV
        echo "CCE_CONFIG_VALIDATED=${{ steps.validate-config.outputs.go-version-consistent }}" >> $GITHUB_ENV

        echo "✅ Environment variables configured"
