name: 'Continuous Integration'

on:
  push:
    branches: [ "master", "develop", "feature/*" ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    branches: [ "master", "develop" ]
    types: [opened, synchronize, reopened, ready_for_review]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  workflow_dispatch:
    inputs:
      run-security-scan:
        description: 'Run security scan'
        required: false
        default: false
        type: boolean
      run-performance-tests:
        description: 'Run performance tests'
        required: false
        default: false
        type: boolean

# Ensure only one CI run per branch/PR at a time
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

# Default permissions (minimal)
permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write
  statuses: write

# Global environment variables
env:
  GO_VERSION: '1.24'
  CACHE_VERSION: 'v1'
  ARTIFACTS_RETENTION: 30

# Default shell and working directory
defaults:
  run:
    shell: bash

jobs:
  # Version validation - must pass before any other jobs
  version-validation:
    name: 'Version Consistency Validation'
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      go-version-consistent: ${{ steps.validate.outputs.go-version-consistent }}
      config-valid: ${{ steps.validate.outputs.golangci-config-valid }}
      go-version: ${{ steps.validate.outputs.go-version-found }}
    steps:
      - name: Checkout code
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608  # v4.1.0
        with:
          fetch-depth: 1

      - name: Validate configuration consistency
        id: validate
        uses: ./.github/actions/validate-config
        with:
          validate-go-versions: 'true'
          validate-golangci-config: 'true'
          fail-on-mismatch: 'true'

      - name: Upload validation report
        if: always()
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32  # v3.1.3
        with:
          name: version-validation-report
          path: config-reports/
          retention-days: ${{ env.ARTIFACTS_RETENTION }}

  # Fast validation - fail early for basic issues
  fast-validation:
    name: 'Fast Validation'
    runs-on: ubuntu-latest
    needs: version-validation
    if: needs.version-validation.outputs.go-version-consistent == 'true'
    timeout-minutes: 5
    outputs:
      should-skip: ${{ steps.skip-check.outputs.should-skip }}
    steps:
      - name: Checkout code
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608  # v4.1.0
        with:
          fetch-depth: 1

      - name: Check for skip conditions
        id: skip-check
        run: |
          # Skip if this is a draft PR
          if [ "${{ github.event.pull_request.draft }}" = "true" ]; then
            echo "should-skip=true" >> $GITHUB_OUTPUT
            echo "Skipping CI for draft PR"
            exit 0
          fi
          echo "should-skip=false" >> $GITHUB_OUTPUT

      - name: Setup Go environment
        if: steps.skip-check.outputs.should-skip != 'true'
        uses: ./.github/actions/setup
        with:
          go-version: ${{ needs.version-validation.outputs.go-version }}
          install-tools: 'false'  # Skip tools for fast validation
          validate-version-consistency: 'false'  # Already validated

      - name: Verify Go modules
        if: steps.skip-check.outputs.should-skip != 'true'
        run: |
          echo "Verifying Go modules..."
          go mod verify
          go mod tidy
          
          # Check if go.mod or go.sum changed
          if ! git diff --quiet go.mod go.sum; then
            echo "❌ go.mod or go.sum is not up to date"
            echo "Please run 'go mod tidy' and commit the changes"
            git diff go.mod go.sum
            exit 1
          fi
          echo "✅ Go modules verified"

      - name: Basic syntax check
        if: steps.skip-check.outputs.should-skip != 'true'
        run: |
          echo "Running basic syntax check..."
          go vet ./...
          echo "✅ Basic syntax check passed"

      - name: Check for common issues
        if: steps.skip-check.outputs.should-skip != 'true'
        run: |
          echo "Checking for common issues..."
          
          # Check for gofmt issues
          if [ "$(gofmt -l . | wc -l)" -gt 0 ]; then
            echo "❌ Code is not properly formatted"
            echo "Files needing formatting:"
            gofmt -l .
            echo "Please run 'go fmt ./...' and commit the changes"
            exit 1
          fi
          
          echo "✅ Fast validation completed"

  # Build matrix - cross-platform compilation
  build-matrix:
    name: 'Build (${{ matrix.goos }}/${{ matrix.goarch }})'
    runs-on: ${{ matrix.os }}
    needs: [version-validation, fast-validation]
    if: needs.fast-validation.outputs.should-skip != 'true' && needs.version-validation.outputs.go-version-consistent == 'true'
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
          - os: macos-latest
            goos: darwin
            goarch: amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
          - os: windows-latest
            goos: windows
            goarch: amd64
    
    steps:
      - name: Checkout code
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608  # v4.1.0

      - name: Setup Go environment
        uses: ./.github/actions/setup
        with:
          go-version: ${{ needs.version-validation.outputs.go-version }}
          install-tools: 'false'
          validate-version-consistency: 'false'  # Already validated

      - name: Build binary
        uses: ./.github/actions/build
        with:
          target-os: ${{ matrix.goos }}
          target-arch: ${{ matrix.goarch }}
          version: ${{ github.ref_type == 'tag' && github.ref_name || format('dev-{0}', github.sha) }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32  # v3.1.3
        with:
          name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/
          retention-days: ${{ env.ARTIFACTS_RETENTION }}

  # Comprehensive test suite
  test-suite:
    name: 'Test Suite'
    runs-on: ubuntu-latest
    needs: [version-validation, fast-validation]
    if: needs.fast-validation.outputs.should-skip != 'true' && needs.version-validation.outputs.go-version-consistent == 'true'
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608  # v4.1.0

      - name: Setup Go environment
        uses: ./.github/actions/setup
        with:
          go-version: ${{ needs.version-validation.outputs.go-version }}
          install-tools: 'true'
          validate-version-consistency: 'false'  # Already validated
          golangci-config-required: 'true'

      - name: Run unit tests
        uses: ./.github/actions/test
        with:
          test-type: 'unit'
          coverage-threshold: '80'
          parallel: 'true'
          race-detection: 'true'

      - name: Run integration tests
        uses: ./.github/actions/test
        with:
          test-type: 'integration'
          coverage-threshold: '70'
          output-dir: 'test-results-integration'

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32  # v3.1.3
        with:
          name: test-results
          path: |
            test-results/
            test-results-integration/
          retention-days: ${{ env.ARTIFACTS_RETENTION }}

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32  # v3.1.3
        with:
          name: coverage-reports
          path: |
            test-results/coverage.html
            test-results-integration/coverage.html
          retention-days: ${{ env.ARTIFACTS_RETENTION }}

  # Code quality checks
  quality-checks:
    name: 'Quality Checks'
    runs-on: ubuntu-latest
    needs: [version-validation, fast-validation]
    if: needs.fast-validation.outputs.should-skip != 'true' && needs.version-validation.outputs.go-version-consistent == 'true'
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608  # v4.1.0

      - name: Setup Go environment
        uses: ./.github/actions/setup
        with:
          go-version: ${{ needs.version-validation.outputs.go-version }}
          install-tools: 'true'
          validate-version-consistency: 'false'  # Already validated
          golangci-config-required: 'true'

      - name: Validate .golangci.yml configuration
        run: |
          echo "Validating .golangci.yml configuration..."
          if [ ! -f ".golangci.yml" ]; then
            echo "❌ .golangci.yml configuration file is required"
            echo "Please create a comprehensive .golangci.yml configuration file"
            exit 1
          fi
          echo "✅ .golangci.yml configuration file found"

      - name: Run go fmt check
        run: |
          echo "Checking code formatting..."
          if [ "$(gofmt -l . | wc -l)" -gt 0 ]; then
            echo "❌ Code is not properly formatted"
            echo "Files needing formatting:"
            gofmt -l .
            echo ""
            echo "To fix, run: go fmt ./..."
            exit 1
          fi
          echo "✅ Code formatting check passed"

      - name: Run go vet
        run: |
          echo "Running go vet..."
          go vet ./...
          echo "✅ go vet check passed"

      - name: Run golangci-lint with configuration validation
        run: |
          echo "Running golangci-lint with comprehensive configuration..."
          # Validate configuration first
          golangci-lint config verify || {
            echo "❌ .golangci.yml configuration is invalid"
            echo "Please fix the configuration file"
            exit 1
          }
          echo "✅ .golangci.yml configuration is valid"
          
          # Run linting with enhanced reporting
          golangci-lint run --verbose --timeout=5m --out-format=colored-line-number,json:quality-results.json
          echo "✅ golangci-lint check passed"

      - name: Upload quality check results
        if: always()
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32  # v3.1.3
        with:
          name: quality-results
          path: |
            quality-results.json
          retention-days: ${{ env.ARTIFACTS_RETENTION }}

      - name: Check for TODO/FIXME comments
        run: |
          echo "Checking for TODO/FIXME comments..."
          TODO_COUNT=$(grep -r "TODO\|FIXME" --include="*.go" . | wc -l || echo "0")
          if [ "$TODO_COUNT" -gt 0 ]; then
            echo "⚠️ Found $TODO_COUNT TODO/FIXME comments:"
            grep -r "TODO\|FIXME" --include="*.go" . || true
            echo ""
            echo "Consider addressing these before release"
          else
            echo "✅ No TODO/FIXME comments found"
          fi

  # Enhanced security scan
  security-scan:
    name: 'Enhanced Security Scan'
    runs-on: ubuntu-latest
    needs: [version-validation, fast-validation]
    if: |
      needs.fast-validation.outputs.should-skip != 'true' && 
      needs.version-validation.outputs.go-version-consistent == 'true' && (
        github.event_name == 'push' && github.ref == 'refs/heads/main' ||
        github.event.inputs.run-security-scan == 'true' ||
        contains(github.event.pull_request.labels.*.name, 'security')
      )
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608  # v4.1.0

      - name: Setup Go environment
        uses: ./.github/actions/setup
        with:
          go-version: ${{ needs.version-validation.outputs.go-version }}
          install-tools: 'true'
          validate-version-consistency: 'false'  # Already validated
          install-govulncheck: 'true'

      - name: Run security tests
        uses: ./.github/actions/test
        with:
          test-type: 'security'
          output-dir: 'security-test-results'

      - name: Run enhanced security scanning
        uses: ./.github/actions/security
        with:
          scan-type: 'both'  # gosec + govulncheck
          severity-threshold: 'high'
          output-format: 'json'
          output-dir: 'security-results'
          fail-on-critical: 'true'
          fail-on-high: 'true'
          upload-sarif: 'true'

      - name: Upload enhanced security results
        if: always()
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32  # v3.1.3
        with:
          name: enhanced-security-results
          path: security-results/
          retention-days: ${{ env.ARTIFACTS_RETENTION }}

  # Performance tests (conditional)
  performance-tests:
    name: 'Performance Tests'
    runs-on: ubuntu-latest
    needs: [version-validation, fast-validation]
    if: |
      needs.fast-validation.outputs.should-skip != 'true' && 
      needs.version-validation.outputs.go-version-consistent == 'true' && (
        github.event_name == 'push' && github.ref == 'refs/heads/main' ||
        github.event.inputs.run-performance-tests == 'true' ||
        contains(github.event.pull_request.labels.*.name, 'performance')
      )
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608  # v4.1.0

      - name: Setup Go environment
        uses: ./.github/actions/setup
        with:
          go-version: ${{ needs.version-validation.outputs.go-version }}
          install-tools: 'true'
          validate-version-consistency: 'false'  # Already validated

      - name: Run performance tests
        uses: ./.github/actions/test
        with:
          test-type: 'performance'
          output-dir: 'performance-results'
          timeout: '15m'

      - name: Upload performance results
        if: always()
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32  # v3.1.3
        with:
          name: performance-results
          path: performance-results/
          retention-days: ${{ env.ARTIFACTS_RETENTION }}

  # Final integration job
  integration:
    name: 'Integration Validation'
    runs-on: ubuntu-latest
    needs: [version-validation, fast-validation, build-matrix, test-suite, quality-checks]
    if: always() && needs.fast-validation.outputs.should-skip != 'true' && needs.version-validation.outputs.go-version-consistent == 'true'
    timeout-minutes: 5
    
    steps:
      - name: Check job results
        run: |
          echo "Checking results of required jobs..."
          
          # Check version validation (critical)
          if [ "${{ needs.version-validation.result }}" != "success" ]; then
            echo "❌ Version validation failed - this is a critical error"
            exit 1
          fi
          echo "✅ Version validation passed"
          
          # Check required job results
          if [ "${{ needs.build-matrix.result }}" != "success" ]; then
            echo "❌ Build matrix failed"
            exit 1
          fi
          
          if [ "${{ needs.test-suite.result }}" != "success" ]; then
            echo "❌ Test suite failed"
            exit 1
          fi
          
          if [ "${{ needs.quality-checks.result }}" != "success" ]; then
            echo "❌ Quality checks failed"
            exit 1
          fi
          
          echo "✅ All required jobs passed"

      - name: Download all artifacts
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a  # v3.0.2
        with:
          path: ./artifacts

      - name: Generate build summary
        run: |
          echo "## CI Pipeline Summary" > pipeline-summary.md
          echo "" >> pipeline-summary.md
          echo "### Version Validation" >> pipeline-summary.md
          echo "- **Go Version Consistency**: ${{ needs.version-validation.outputs.go-version-consistent == 'true' && '✅ PASS' || '❌ FAIL' }}" >> pipeline-summary.md
          echo "- **Configuration Validation**: ${{ needs.version-validation.outputs.config-valid == 'true' && '✅ PASS' || '❌ FAIL' }}" >> pipeline-summary.md
          echo "- **Go Version Used**: ${{ needs.version-validation.outputs.go-version }}" >> pipeline-summary.md
          echo "" >> pipeline-summary.md
          echo "### Build Results" >> pipeline-summary.md
          echo "- **Status**: ✅ Success" >> pipeline-summary.md
          echo "- **Ref**: ${{ github.ref }}" >> pipeline-summary.md
          echo "- **SHA**: ${{ github.sha }}" >> pipeline-summary.md
          echo "- **Triggered by**: ${{ github.event_name }}" >> pipeline-summary.md
          echo "" >> pipeline-summary.md
          
          echo "### Artifacts Generated" >> pipeline-summary.md
          if [ -d "./artifacts" ]; then
            find ./artifacts -name "*.log" -o -name "*.html" -o -name "*.json" -o -name "cce*" | head -20 | while read file; do
              echo "- $(basename "$file")" >> pipeline-summary.md
            done
          fi
          
          echo "" >> pipeline-summary.md
          echo "Generated at: $(date -u)" >> pipeline-summary.md
          
          cat pipeline-summary.md

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea  # v7.0.1
        with:
          script: |
            const fs = require('fs');
            let summary = '## 🚀 Enhanced CI Pipeline Results\n\n';
            summary += '✅ All checks passed! The changes are ready for review.\n\n';
            summary += '### Version Validation\n';
            summary += '- ✅ Go Version Consistency (${{ needs.version-validation.outputs.go-version }})\n';
            summary += '- ✅ Configuration Validation\n\n';
            summary += '### Jobs Completed\n';
            summary += '- ✅ Fast Validation\n';
            summary += '- ✅ Cross-platform Builds\n';
            summary += '- ✅ Test Suite (Unit + Integration)\n';
            summary += '- ✅ Quality Checks (golangci-lint + .golangci.yml validation)\n';
            
            if ('${{ needs.security-scan.result }}' === 'success') {
              summary += '- ✅ Enhanced Security Scan (gosec + govulncheck)\n';
            }
            
            if ('${{ needs.performance-tests.result }}' === 'success') {
              summary += '- ✅ Performance Tests\n';
            }
            
            summary += '\n### Artifacts\n';
            summary += 'Build artifacts and test reports are available in the [Actions tab](' + context.payload.repository.html_url + '/actions/runs/' + context.runId + ').\n';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

      - name: Set final status
        run: |
          echo "🎉 Enhanced CI Pipeline completed successfully!"
          echo "All builds, tests, quality checks, and validations passed."
          echo ""
          echo "Version Information:"
          echo "- Go Version: ${{ needs.version-validation.outputs.go-version }}"
          echo "- Version Consistency: ✅ Validated"
          echo "- Configuration: ✅ Validated"
          echo ""
          echo "Quality Improvements Implemented:"
          echo "- ✅ Version synchronization across all files"
          echo "- ✅ Comprehensive .golangci.yml configuration validation"
          echo "- ✅ Enhanced security scanning (gosec + govulncheck)"
          echo "- ✅ Configuration consistency validation"
          echo "- ✅ Improved error reporting and remediation guidance"